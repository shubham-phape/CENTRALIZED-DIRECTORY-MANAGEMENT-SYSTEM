/*Name: Shubham Phape
 * UTA ID: 1001773736*/

import javax.swing.*;
import java.io.File;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.nio.file.*;
import java.nio.file.attribute.BasicFileAttributes;
import java.nio.file.attribute.FileTime;
import java.util.*;

public class ClientHandler implements Runnable {

    private Socket s;
    private String client_name;
    private ObjectInputStream objectInputStream;
    private ObjectOutputStream objectOutputStream;
    private JTextArea CH_list_ta;
    private JTextArea operations_log_CH;
    private JList CH_jList_opertions;

    /*COnstructor. Generated by IDE*/
    public ClientHandler(Socket s, String client_name, JTextArea CH_list_ta, JTextArea operations_log_CH, JList jList_operation, ObjectInputStream objectInputStream, ObjectOutputStream objectOutputStream) {

        this.s = s;
        this.client_name = client_name;
        this.objectInputStream = objectInputStream;
        this.objectOutputStream = objectOutputStream;
        this.CH_list_ta = CH_list_ta;
        this.operations_log_CH = operations_log_CH;
        this.CH_jList_opertions = jList_operation;
    }

    /*-----------------------------Function that keep on listening to the client request-----------------------------------*/
    @Override
    public void run() {
        dataBox received_db;
        String client_path;

        while(true) {
            try {
                //reading the received object in dataBox object
                received_db = (dataBox) objectInputStream.readObject();

                /*Creating an object of dataBox to send response to the client*/
                dataBox sendDB = new dataBox();
                sendDB.setClient_name(received_db.getClient_name());

                //setting an if else for the kind of message client sends
                //As we perform different operations for various requests from the client
                if (received_db.getType_of_message().equalsIgnoreCase("create")){
                    /*---------------------------------Create Directory--------------------------------------------*/
                    /*If client wants to create a directory*/
                    sendDB.setType_of_message("create");
                    if (new File(received_db.getCurrent_path()).mkdirs()){
                        operations_log_CH.append("--------------------------------------\nCREATE OPERATION SUCCESSFULL!!!!\n");
                        operations_log_CH.append("Created new directory for user:"+ client_name+"\n");
                        operations_log_CH.append("New DIrectory path: "+ received_db.getCurrent_path()+"\n");
                        operations_log_CH.append("--------------------------------------\n");
                        /*Directory created Succesfully*/
                        sendDB.setOperation_report("Directory Succesfully Created.\n");
                        /*------maintaing the operation Logs---------*/
                        String operation_label = client_name+ " : "+"created "+ received_db.getFolder_name();
                        /*Initialixing the transaction object to add to the list*/
                        Transaction operation_obj = new Transaction();
                        /*adding the operation display top the JList*/
                        int operation_id =addoperation_jlist(operation_label);


                        operation_obj.setClientname(client_name);
                        operation_obj.setOperation_id(operation_id);
                        operation_obj.setOperation_name("create");
                        operation_obj.setCreate_foldername(received_db.getFolder_name());
                        operation_obj.setPath1(received_db.getCurrent_path());
                        operation_obj.setDisplay_message(operation_label);
                        operation_obj.setParent("yes");
                        /*Adding the transaction object to the object list*/
                        Server.operations_objectList.add(operation_obj);

                    }
                    else{
                        /*Directory already exists*/
                        operations_log_CH.append("--------------------------------------\nCREATE OPERATION FAILED!!!!\n");
                        operations_log_CH.append("Failed to create new directory for user:"+ client_name+"\n");
                        operations_log_CH.append("DIRECTORY ALREADY EXIXTS\n");
                        operations_log_CH.append("--------------------------------------\n");
                        sendDB.setOperation_report("Directory Already Exists.\n");
                    }
                    sendDB.setCurrent_path(received_db.getCurrent_path());
                    /*sending data to the client as response*/
                    send_to_client(sendDB);
                }

                else if (received_db.getType_of_message().equalsIgnoreCase("move")){
                    /*---------------------------------MOVE Directory-------------------------------------------------
                    * If the client wants to move from src to dest*/
                    /*initializing the type of operation*/
                    sendDB.setType_of_message("move");

                    //retrieving the data from the received object
                    File src = new File(received_db.getSource_path());
                    /*to split the string
                    refrence:https://stackoverflow.com/questions/26019132/how-to-split-a-file-path-to-get-the-file-name*/
                    String cp =received_db.getSource_path().substring(received_db.getSource_path().lastIndexOf("/"));
                    File dest = new File(received_db.getDestination_path()+cp);

                    //Converting the FIles path to PATH datatype
                    /*References: https://stackoverflow.com/questions/15137849/java-using-nio-files-copy-to-move-directory*/
                    Path srcPath = src.toPath();
                    Path destPath = dest.toPath();
                    /*Printing server log*/
                    operations_log_CH.append("--------------------------------------\nMOVE OPERATION SUCCESFULL!!!!\n");
                    operations_log_CH.append("Moved the directory for user:"+ client_name+"\n");
                    operations_log_CH.append("New Path:"+received_db.getDestination_path()+"\n");
                    operations_log_CH.append("--------------------------------------\n");

                    /*Calling thw function to move the dir from source to dest*/
                    if (dest.mkdir()){
                        move(srcPath, destPath, client_name);
                        /*Seeting th respons message*/
                        sendDB.setCurrent_path(received_db.getDestination_path());
                        sendDB.setOperation_report("File Succesfully moved to destination\n");
                        /*sending data to the client as response*/
                        send_to_client(sendDB);
                        /*------maintaing the operation Logs---------*/
                        String operation_label = client_name+ " : "+"moved to "+ cp;
                        /*Initialixing the transaction object to add to the list*/
                        Transaction operation_obj = new Transaction();
                        /*adding the operation display top the JList*/
                        int operation_id =addoperation_jlist(operation_label);

                        operation_obj.setClientname(client_name);
                        operation_obj.setOperation_id(operation_id);
                        operation_obj.setOperation_name("move");
                        operation_obj.setParent("yes");
                        //operation_obj.setCreate_foldername(received_db.getFolder_name());
                        //setting the destination path as it can be used as our source path later
                        operation_obj.setPath1(received_db.getDestination_path()+cp);
                        //Setting the source path as our destination for undo
                        operation_obj.setPath2(received_db.getSource_path());
                        operation_obj.setDisplay_message(operation_label);
                        /*Adding the transaction object to the object list*/
                        Server.operations_objectList.add(operation_obj);

                        /*removing all the subsequent */



                    }

                }

                else if (received_db.getType_of_message().equalsIgnoreCase("rename")){
                    /*---------------------------------RENAME directroy-----------------------------------------------
                     *Client wants to rename the existing directory */
                    /*initializing the type of operation*/
                    sendDB.setType_of_message("rename");
                    sendDB.setCurrent_path(received_db.getCurrent_path());
                    //retrieving the data from the received object
                    File src = new File(received_db.getSource_path());
                    File dest = new File(received_db.getDestination_path());

                    /*Renaming the file*/
                    /*Refrences: https://stackoverflow.com/questions/10168066/how-to-print-out-all-the-elements-of-a-list-in-java*/
                    if(src.renameTo(dest)){
                        //file succesfullyrenamed
                        /*Printing server log*/
                        operations_log_CH.append("--------------------------------------\nRENAME OPERATION SUCCESFULL!!!!\n");
                        operations_log_CH.append("Renamed the directory for user:"+ client_name+"\n");
                        operations_log_CH.append("New Renamed path :"+received_db.getDestination_path()+"\n");
                        operations_log_CH.append("--------------------------------------\n");
                        sendDB.setOperation_report("File Sucessfully renamed!!\n");


                        /*------maintaing the operation Logs---------*/
                        String operation_label = client_name+ " : "+"Renamed "+ received_db.getRename_this() + " to "+received_db.getRename_to_this() ;
                        /*Initialixing the transaction object to add to the list*/
                        Transaction operation_obj = new Transaction();
                        /*adding the operation display top the JList*/
                        int operation_id =addoperation_jlist(operation_label);

                        operation_obj.setClientname(client_name);
                        operation_obj.setOperation_id(operation_id);
                        operation_obj.setOperation_name("rename");
                        operation_obj.setParent("yes");
                        //operation_obj.setCreate_foldername(received_db.getFolder_name());
                        //setting the destination path as it can be used as our source path later
                        operation_obj.setPath1(received_db.getDestination_path());
                        //Setting the source path as our destination for undo
                        operation_obj.setPath2(received_db.getSource_path());
                        operation_obj.setDisplay_message(operation_label);
                        /*Adding the transaction object to the object list*/
                        Server.operations_objectList.add(operation_obj);
                    }else{
                        /*rename operation failed*/
                        operations_log_CH.append("--------------------------------------\nRENAME OPERATION FAILED!!!!\n");
                        operations_log_CH.append("FAILED to Rename the directory for user:"+ client_name+"\n");

                        operations_log_CH.append("--------------------------------------\n");
                        sendDB.setOperation_report("File rename FAILED!!\n");
                    }

                    /*sending data to the client as response*/
                    send_to_client(sendDB);


                }

                else if (received_db.getType_of_message().equalsIgnoreCase("list")){
                    /*---------------------------------LIST Directory---------------------------------------------------
                     * to give the list of content of files to the user*/
                    /*initializing the type of operation*/
                    sendDB.setType_of_message("list");
                    /*REferemces: https://stackabuse.com/java-list-files-in-a-directory/
                    2) https://javaconceptoftheday.com/list-all-files-in-directory-in-java/*/

                    File f = new File(received_db.getCurrent_path());

                    // Populates the array with names of files and directories
                    List<String> list_offiles = Arrays.asList(f.list());
                    //populating the strin[] of model to save the list
                    sendDB.setList_of_files(list_offiles);
                    sendDB.setCurrent_path(received_db.getCurrent_path());
                    /*Printing the logs*/
                    operations_log_CH.append("--------------------------------------\nLIST OPERATION SUCCESFULL!!!!\n");
                    operations_log_CH.append("LISTING the contents of the directory for user:"+ client_name+"\n");

                    if (list_offiles.size()==0){
                        sendDB.setOperation_report("Directory is Empty!!!!!!\n");
                        operations_log_CH.append("Directory is empty!");
                    }
                    else{
                        sendDB.setOperation_report("This Directory has following directories:\n");
                    }
                    operations_log_CH.append("--------------------------------------\n");
                    /*sending data to the client as response*/
                    send_to_client(sendDB);
                }

                else if (received_db.getType_of_message().equalsIgnoreCase("delete")){
                    /*---------------------------------DELETE Directory------------------------------------------------
                     * client wants to delete the directory*/
                    /*initializing the type of operation*/
                    sendDB.setType_of_message("delete");
                    sendDB.setCurrent_path(received_db.getCurrent_path());

                    //retrieving the target path to be deleted
                    String target = received_db.getDelete_path();
                    Path traget_path = Paths.get(target);
                    String trash_loction_path ="trash/"+client_name+"/"+received_db.getFolder_name();
                    File dest = new File(target);
                    File pathtoTrash = new File(trash_loction_path);
                    //creating a folder in trash
                    if (pathtoTrash.mkdirs()){
                        move(traget_path, Paths.get(trash_loction_path), client_name);
                    }

                    //deleting the directory and its content
                    //Refrences: https://mkyong.com/java/how-to-delete-directory-in-java/
                    //REfrence starts here
                   /* Files.walkFileTree(traget_path, new SimpleFileVisitor<>(){
                        // delete directories or folders

                        @Override
                        public FileVisitResult postVisitDirectory(Path dir,
                                                                  IOException exc)
                                throws IOException {
                            //Actually dleleting the directory
                            Files.delete(dir);
                            System.out.printf("Directory is deleted : %s%n", dir);
                            return FileVisitResult.CONTINUE;
                        }

                        // delete files
                        @Override
                        public FileVisitResult visitFile(Path file,
                                                         BasicFileAttributes attrs)
                                throws IOException {
                            //deleting the inside file in the directory
                            Files.delete(file);
                            System.out.printf("File is deleted : %s%n", file);
                            return FileVisitResult.CONTINUE;
                        }
                    });*/
                    //Reference ends here
                    /*printing the server log*/
                    operations_log_CH.append("--------------------------------------\nDELETE OPERATION SUCCESFULL!!!!\n");
                    operations_log_CH.append("DELETED the directory for user:"+ client_name+"\n");

                    operations_log_CH.append("--------------------------------------\n");
                    //setting th report message to the client
                    sendDB.setOperation_report("Directory has been deleted Successfully\n");
                    //sending the response object to the client
                    send_to_client(sendDB);

                    /*------maintaing the operation Logs---------*/
                    String operation_label = client_name+ " : "+"Deleted "+  target;
                    /*Initialixing the transaction object to add to the list*/
                    Transaction operation_obj = new Transaction();
                    /*adding the operation display top the JList*/
                    int operation_id =addoperation_jlist(operation_label);

                    operation_obj.setParent("yes");
                    operation_obj.setClientname(client_name);
                    operation_obj.setOperation_id(operation_id);
                    operation_obj.setOperation_name("delete");
                    //operation_obj.setCreate_foldername(received_db.getFolder_name());
                    //setting the earlier path before delete
                    operation_obj.setPath1(target);
                    //Setting trash can path to folder
                    operation_obj.setPath2(trash_loction_path);
                    operation_obj.setDisplay_message(operation_label);
                    /*Adding the transaction object to the object list*/
                    Server.operations_objectList.add(operation_obj);



                }
                else if(received_db.getType_of_message().equalsIgnoreCase("disconnect")){
                    /*---------------------------------dissconnect ------------------------------------------------
                     * client wants to disconnect*/
                    //incase of execption of disconnect
                    Server.online_clients.remove(client_name);
                    Server.identifier_map.remove(received_db.getIdentifier());
                    operations_log_CH.append("--------------------------------------\nUSER DISCONNECTED\n");
                    operations_log_CH.append(client_name+" has disconnected the Server"+"\n");
                    //operations_log_CH.append(Server.identifier_map.toString());
                    operations_log_CH.append("--------------------------------------\n");


                    /*Reference*/
                    /*https://stackoverflow.com/questions/50397355/cant-update-text-area-in-swing*/
                    SwingUtilities.invokeLater(new Runnable() {
                        @Override
                        public void run() {

                            CH_list_ta.setText(String.join("\n", Server.online_clients));
                        }
                    });
                }

                else if(received_db.getType_of_message().equalsIgnoreCase("refresh")){
                    /*---------------------------------REFRESH Directory------------------------------------------------
                     * client wants to refresh the directory*/
                    /*initializing the type of operation*/
                    sendDB.setType_of_message("refresh");

                    /*REferemces: https://stackabuse.com/java-list-files-in-a-directory/
                    2) https://javaconceptoftheday.com/list-all-files-in-directory-in-java/*/

                    File f = new File("server/");

                    // Populates the array with names of files and directories
                    List<String> list_offiles = Arrays.asList(f.list());
                    //populating the strin[] of model to save the list
                    sendDB.setList_of_files(list_offiles);

//                    sending to the client
                    send_to_client(sendDB);
                }
                else if(received_db.getType_of_message().equalsIgnoreCase("synchronize")){
                    /*---------------------------------synchronize Directory------------------------------------------------
                     * client wants to synchronize the directory*/
                    /*initializing the type of operation*/
                    sendDB.setType_of_message("synchronize");

                }
                else if(received_db.getType_of_message().equalsIgnoreCase("desynchronize")){
                    /*---------------------------------DEsynchronize Directory------------------------------------------------
                     * client wants to synchronize the directory*/
                    /*initializing the type of operation*/
                    sendDB.setType_of_message("desynchronize");

                }
/*END OF IF ELSe and while*/
            } catch (Exception e) {




                e.printStackTrace();
            }
        }
    }
    private void colourJliost(){

    }
    /*-----------------------------Function to add the display message to the Jlist display------------------------------------------*/
    private int addoperation_jlist(String operation_label) {
        /*GETTING THE ALREADY EXISTING OPERATIONS PRESENT INTHE jLIST
        * rReference
         */
        /*variable for the size of the Jlist*/
        int size_ofjlist = CH_jList_opertions.getModel().getSize();
        /*string array t store the previous content*/
        String[] operatiosname = new String[size_ofjlist+1];
        for (int i = 0; i < size_ofjlist ; i++) {
            operatiosname[i] = (String.valueOf(CH_jList_opertions.getModel().getElementAt(i)));
        }
        operatiosname[size_ofjlist] = operation_label;
        DefaultComboBoxModel defaultComboBoxModel = new DefaultComboBoxModel(operatiosname);
        CH_jList_opertions.setModel(defaultComboBoxModel);


        //      operations_log_CH.append(operatiosname.toString());
//
        return size_ofjlist;
    }

    /*-----------------------------Function to send the desired object to client------------------------------------------*/
    private void send_to_client(dataBox sendDB) {
        /*loop to iterate  through all the clients*/
        for(ClientHandler client_i : Server.Client_handler_list){
            /*comparing to get our desired client*/
            if (client_i.client_name == sendDB.getClient_name()){
                try {
                    client_i.objectOutputStream.writeObject(sendDB);
                    objectOutputStream.flush();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }

        }
    }

    /*--------------------------Functio to move the directroy*/
    /*Class and function to move files
     * Referenced from:https://stackoverflow.com/questions/15137849/java-using-nio-files-copy-to-move-directory*/
    /*Reference starts here*/
    public static void move(Path source, Path target, String client_name) throws IOException {
    /*function to move the directory */
        class FileMover extends SimpleFileVisitor<Path> {
            private Path source;
            private Path target;

            //constructor to initialize class parameters
            private FileMover(Path source, Path target) {
                this.source = source;
                this.target = target;
            }

            @Override
            public FileVisitResult visitFile(final Path file, final BasicFileAttributes attrs) throws IOException {
                Files.move(file, target.resolve(source.relativize(file)),
                        StandardCopyOption.REPLACE_EXISTING);
                return FileVisitResult.CONTINUE;
            }

            @Override
            public FileVisitResult preVisitDirectory(final Path dir, final BasicFileAttributes attrs) throws IOException {
                Path newDir = target.resolve(source.relativize(dir));
                try {
                    Files.copy(dir, newDir,
                            StandardCopyOption.COPY_ATTRIBUTES,
                            StandardCopyOption.REPLACE_EXISTING);
                } catch (DirectoryNotEmptyException e) {
                    // ignore and skip
                }
                return FileVisitResult.CONTINUE;
            }

            @Override
            public FileVisitResult postVisitDirectory(final Path dir, final IOException exc) throws IOException {
                Path newDir = target.resolve(source.relativize(dir));
                FileTime time = Files.getLastModifiedTime(dir);
                Files.setLastModifiedTime(newDir, time);
                Files.delete(dir);
                /*MAking the child operations invalid*/
                 getselectedobject(client_name+" : "+"created "+ dir.getFileName());
                System.out.println(dir.getFileName()+" MAde this operation NO\n");
                //subfolder.
                /*System.out.println("Now in : "+dir.getFileName().toString());*/
                return FileVisitResult.CONTINUE;
            }

            private void getselectedobject(String displaymessage) {
                Transaction thisobject = new Transaction();
                for(int i = 0; i < Server.operations_objectList.size(); i= i+1 ){
                    Transaction selected_object = Server.operations_objectList.get(i);
                    if (selected_object.getDisplay_message().equalsIgnoreCase(displaymessage)){
                        Server.operations_objectList.get(i).setParent("no");

                        System.out.println(Server.operations_objectList.get(i).getDisplay_message()+"\n");

                    }
                }

            }
        }

        FileMover fm = new FileMover(source, target);
        EnumSet<FileVisitOption> opts = EnumSet.of(FileVisitOption.FOLLOW_LINKS);
        /*Iterating through the file structure*/
        Files.walkFileTree(source, opts, Integer.MAX_VALUE, fm);
    }
    /*Refrence ends here*/


}


